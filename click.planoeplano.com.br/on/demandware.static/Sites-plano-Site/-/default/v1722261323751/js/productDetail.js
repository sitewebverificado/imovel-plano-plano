/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./cartridges/app_custom_plano/cartridge/client/default/js/productDetail.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./cartridges/app_custom_plano/cartridge/client/default/js/product/details.js":
/*!************************************************************************************!*\
  !*** ./cartridges/app_custom_plano/cartridge/client/default/js/product/details.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar base = __webpack_require__(/*! base/product/base */ \"./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js\");\r\nvar detail = __webpack_require__(/*! base/product/detail */ \"./cartridges/app_storefront_base/cartridge/client/default/js/product/detail.js\");\r\n\r\nvar exportDetails = $.extend({}, base, detail, {});\r\n\r\nmodule.exports = exportDetails;\r\n\n\n//# sourceURL=webpack:///./cartridges/app_custom_plano/cartridge/client/default/js/product/details.js?");

/***/ }),

/***/ "./cartridges/app_custom_plano/cartridge/client/default/js/product/heroCarousel.js":
/*!*****************************************************************************************!*\
  !*** ./cartridges/app_custom_plano/cartridge/client/default/js/product/heroCarousel.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar base = __webpack_require__(/*! base/product/base */ \"./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js\");\r\n__webpack_require__(/*! ../utils/index */ \"./cartridges/app_custom_plano/cartridge/client/default/js/utils/index.js\");\r\nvar slickConfig = {\r\n\r\n    prevArrow: '<button class=\"slick-prev fa-solid fa-angle-left\"></button>',\r\n    nextArrow: '<button class=\"slick-next fa-solid fa-angle-left\"></button>',\r\n    infinite: false,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 3,\r\n    centerMode: false,\r\n    adaptiveHeight: true,\r\n    dots: false,\r\n    arrows: true,\r\n    responsive: [\r\n        {\r\n            breakpoint: 767,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 992,\r\n            settings: {\r\n                slidesToShow: 1,\r\n                slidesToScroll: 1\r\n            }\r\n        },\r\n        {\r\n            breakpoint: 1400,\r\n            settings: {\r\n                slidesToShow: 3,\r\n                slidesToScroll: 3\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nvar map;\r\nvar bounds;\r\nvar geocoder;\r\n\r\nfunction initSlick() {\r\n    $('.tab-pane-items').slick(slickConfig);\r\n}\r\n\r\nfunction destroySlick() {\r\n    $('.tab-pane-items').slick('unslick');\r\n}\r\n\r\nasync function extractLatLng(address) {\r\n    let { results } = await geocoder.geocode({ 'address': address });\r\n    let coordinates = { lat: results[0].geometry.location.lat(), lng: results[0].geometry.location.lng() };\r\n    return coordinates;\r\n}\r\n\r\nfunction addMarker(payload) {\r\n    // eslint-disable-next-line no-undef\r\n    const infowindow = new google.maps.InfoWindow({\r\n        content: payload.infoWindow,\r\n        ariaLabel: 'Informações do endereço'\r\n    });\r\n    let marker = new google.maps.Marker({ // eslint-disable-line no-undef\r\n        position: payload.position,\r\n        map,\r\n        icon: payload.icon\r\n    });\r\n    marker.addListener('click', () => {\r\n        infowindow.open({\r\n            anchor: marker,\r\n            map\r\n        });\r\n    });\r\n    bounds.extend(marker.getPosition());\r\n}\r\n\r\nbase.initSlick = initSlick;\r\n\r\nbase.listenTabSwitch = function () {\r\n    $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function () {\r\n        destroySlick();\r\n        initSlick();\r\n    });\r\n};\r\n\r\nbase.initTabsCarousel = function () {\r\n    // eslint-disable-next-line no-undef\r\n    if (isMobile()) {\r\n        $('#myTab').slick({\r\n            dots: false,\r\n            arrows: false,\r\n            slidesToShow: 2.5,\r\n            infinite: false\r\n        });\r\n    }\r\n};\r\n\r\n// Função para alternar o modo de tela cheia\r\nfunction toggleFullScreen() {\r\n    if (!document.fullscreenElement) {\r\n        document.documentElement.requestFullscreen();\r\n    } else if (document.exitFullscreen) {\r\n        document.exitFullscreen();\r\n    }\r\n}\r\n\r\n// Inicialização do mapa\r\nbase.initMap = async function () {\r\n    bounds = new google.maps.LatLngBounds(); // eslint-disable-line no-undef\r\n    geocoder = new google.maps.Geocoder(); // eslint-disable-line no-undef\r\n    let $mapEl = $('#map');\r\n    let $attributes = $mapEl.data('attributes');\r\n    let $centralAddressEl = $('.addresses__item__type__contentCentral__address');\r\n    let centralAddress = $attributes.find((el) => (el.label === 'Endereço das Centrais')).value[0];\r\n    let icons = {\r\n        enterprise: $mapEl.data('icon-enterprise'),\r\n        sales: $mapEl.data('icon-sales')\r\n    };\r\n    let styles = {\r\n        default: [],\r\n        hide: [\r\n            {\r\n                featureType: 'poi.business',\r\n                stylers: [{ visibility: 'off' }]\r\n            },\r\n            {\r\n                featureType: 'transit',\r\n                elementType: 'labels.icon',\r\n                stylers: [{ visibility: 'off' }]\r\n            }\r\n        ]\r\n    };\r\n\r\n    if (!$mapEl.length) {\r\n        return;\r\n    }\r\n\r\n    $centralAddressEl.html(centralAddress);\r\n\r\n    let address = {\r\n        building: {\r\n            street: $attributes.find((el) => (el.label === 'Endereço')).value[0],\r\n            number: $attributes.find((el) => (el.label === 'Número / Endereço')).value[0],\r\n            district: $attributes.find((el) => (el.label === 'Bairro')).value[0],\r\n            city: $attributes.find((el) => (el.label === 'Cidade')).value[0],\r\n            uf: $attributes.find((el) => (el.label === 'Estado')).value[0]\r\n        },\r\n        central: {\r\n            address: $attributes.find((el) => (el.label === 'Endereço das Centrais')).value[0]\r\n        }\r\n    };\r\n\r\n    let location = [\r\n        {\r\n            name: 'building',\r\n            address: `${address.building.street}, ${address.building.number} - ${address.building.district} - ${address.building.city}`\r\n        },\r\n        {\r\n            name: 'central',\r\n            address: address.central.address\r\n        }\r\n    ];\r\n\r\n    // Configuração do mapa com UI padrão habilitada\r\n    // eslint-disable-next-line no-undef\r\n    map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 16,\r\n        disableDefaultUI: false, // Habilita a UI padrão\r\n        styles: styles.hide\r\n    });\r\n\r\n    // Adicionar botão de tela cheia\r\n    const fullScreenButton = document.createElement('button');\r\n    fullScreenButton.textContent = 'Fullscreen';\r\n    fullScreenButton.classList.add('fullscreen-button'); // Adicione sua classe para estilização\r\n    fullScreenButton.addEventListener('click', toggleFullScreen);\r\n    // eslint-disable-next-line no-undef\r\n    map.controls[google.maps.ControlPosition.TOP_RIGHT].push(fullScreenButton);\r\n\r\n    location.forEach(async (el) => {\r\n        let locationCoord = await extractLatLng(el.address);\r\n        let productName = el.name === 'building' ? $('.product__name').html() : 'Central de vendas';\r\n        addMarker({\r\n            position: { lat: locationCoord.lat, lng: locationCoord.lng },\r\n            icon: el.name === 'building' ? icons.sales : icons.enterprise,\r\n            infoWindow: `<div class=\"map__infowindow\">\r\n                            <div class=\"map__infowindow__address\">\r\n                                <div class=\"map__infowindow__address__title\">\r\n                                <p>${productName}</p>\r\n                                </div>\r\n                                <div class=\"map__infowindow__address__content\">\r\n                                <i class=\"fa-solid fa-location-dot\"></i>\r\n                                <span>${el.address}</span>\r\n                                </div>\r\n                            </div>\r\n                        </div>`\r\n        });\r\n    });\r\n\r\n    map.fitBounds(bounds);\r\n};\r\n\r\nmodule.exports = base;\r\n\n\n//# sourceURL=webpack:///./cartridges/app_custom_plano/cartridge/client/default/js/product/heroCarousel.js?");

/***/ }),

/***/ "./cartridges/app_custom_plano/cartridge/client/default/js/productDetail.js":
/*!**********************************************************************************!*\
  !*** ./cartridges/app_custom_plano/cartridge/client/default/js/productDetail.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nvar processInclude = __webpack_require__(/*! base/util */ \"./cartridges/app_storefront_base/cartridge/client/default/js/util.js\");\r\n\r\n$(document).ready(function () {\r\n    processInclude(__webpack_require__(/*! ./product/details */ \"./cartridges/app_custom_plano/cartridge/client/default/js/product/details.js\"));\r\n    processInclude(__webpack_require__(/*! ./product/heroCarousel */ \"./cartridges/app_custom_plano/cartridge/client/default/js/product/heroCarousel.js\"));\r\n\r\n    var recommendationsSlickInitialized = false;\r\n    $('.js-recommendations-wrapper').on('DOMSubtreeModified', function () {\r\n        let slider = $('.js-recommendations-wrapper .js-product-recommendation-slider');\r\n        if (slider.length > 0 && !recommendationsSlickInitialized) {\r\n            recommendationsSlickInitialized = true;\r\n            $('.js-product-recommendation-slider').slick({\r\n                arrows: false,\r\n                dots: false,\r\n                mobileFirst: true,\r\n                responsive: [\r\n                    {\r\n                        breakpoint: 992,\r\n                        settings: {\r\n                            slidesToShow: 4,\r\n                            centerMode: false\r\n                        }\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    });\r\n});\r\n\n\n//# sourceURL=webpack:///./cartridges/app_custom_plano/cartridge/client/default/js/productDetail.js?");

/***/ }),

/***/ "./cartridges/app_custom_plano/cartridge/client/default/js/utils/index.js":
/*!********************************************************************************!*\
  !*** ./cartridges/app_custom_plano/cartridge/client/default/js/utils/index.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("window.isMobile = function isMobile() {\r\n    const largura = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n    if (largura <= 997) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_custom_plano/cartridge/client/default/js/utils/index.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/components/focus.js":
/*!****************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/components/focus.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = {\r\n    setTabNextFocus: function (focusParams) {\r\n        var KEYCODE_TAB = 9;\r\n        var isTabPressed = (focusParams.event.key === 'Tab' || focusParams.event.keyCode === KEYCODE_TAB);\r\n\r\n        if (!isTabPressed) {\r\n            return;\r\n        }\r\n\r\n        var firstFocusableEl = $(focusParams.containerSelector + ' ' + focusParams.firstElementSelector);\r\n        var lastFocusableEl = $(focusParams.containerSelector + ' ' + focusParams.lastElementSelector);\r\n\r\n        if ($(focusParams.containerSelector + ' ' + focusParams.lastElementSelector).is(':disabled')) {\r\n            lastFocusableEl = $(focusParams.containerSelector + ' ' + focusParams.nextToLastElementSelector);\r\n            if ($('.product-quickview.product-set').length > 0) {\r\n                var linkElements = $(focusParams.containerSelector + ' a#fa-link.share-icons');\r\n                lastFocusableEl = linkElements[linkElements.length - 1];\r\n            }\r\n        }\r\n\r\n        if (focusParams.event.shiftKey) /* shift + tab */ {\r\n            if ($(':focus').is(firstFocusableEl)) {\r\n                lastFocusableEl.focus();\r\n                focusParams.event.preventDefault();\r\n            }\r\n        } else /* tab */ {\r\n            if ($(':focus').is(lastFocusableEl)) { // eslint-disable-line\r\n                firstFocusableEl.focus();\r\n                focusParams.event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/components/focus.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js":
/*!************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar focusHelper = __webpack_require__(/*! ../components/focus */ \"./cartridges/app_storefront_base/cartridge/client/default/js/components/focus.js\");\r\n\r\n/**\r\n * Retrieves the relevant pid value\r\n * @param {jquery} $el - DOM container for a given add to cart button\r\n * @return {string} - value to be used when adding product to cart\r\n */\r\nfunction getPidValue($el) {\r\n    var pid;\r\n\r\n    if ($('#quickViewModal').hasClass('show') && !$('.product-set').length) {\r\n        pid = $($el).closest('.modal-content').find('.product-quickview').data('pid');\r\n    } else if ($('.product-set-detail').length || $('.product-set').length) {\r\n        pid = $($el).closest('.product-detail').find('.product-id').text();\r\n    } else {\r\n        pid = $('.product-detail:not(\".bundle-item\")').data('pid');\r\n    }\r\n\r\n    return pid;\r\n}\r\n\r\n/**\r\n * Retrieve contextual quantity selector\r\n * @param {jquery} $el - DOM container for the relevant quantity\r\n * @return {jquery} - quantity selector DOM container\r\n */\r\nfunction getQuantitySelector($el) {\r\n    var quantitySelected;\r\n    if ($el && $('.set-items').length) {\r\n        quantitySelected = $($el).closest('.product-detail').find('.quantity-select');\r\n    } else if ($el && $('.product-bundle').length) {\r\n        var quantitySelectedModal = $($el).closest('.modal-footer').find('.quantity-select');\r\n        var quantitySelectedPDP = $($el).closest('.bundle-footer').find('.quantity-select');\r\n        if (quantitySelectedModal.val() === undefined) {\r\n            quantitySelected = quantitySelectedPDP;\r\n        } else {\r\n            quantitySelected = quantitySelectedModal;\r\n        }\r\n    } else {\r\n        quantitySelected = $('.quantity-select');\r\n    }\r\n    return quantitySelected;\r\n}\r\n\r\n/**\r\n * Retrieves the value associated with the Quantity pull-down menu\r\n * @param {jquery} $el - DOM container for the relevant quantity\r\n * @return {string} - value found in the quantity input\r\n */\r\nfunction getQuantitySelected($el) {\r\n    return getQuantitySelector($el).val();\r\n}\r\n\r\n/**\r\n * Process the attribute values for an attribute that has image swatches\r\n *\r\n * @param {Object} attr - Attribute\r\n * @param {string} attr.id - Attribute ID\r\n * @param {Object[]} attr.values - Array of attribute value objects\r\n * @param {string} attr.values.value - Attribute coded value\r\n * @param {string} attr.values.url - URL to de/select an attribute value of the product\r\n * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be\r\n *     selected.  If there is no variant that corresponds to a specific combination of attribute\r\n *     values, an attribute may be disabled in the Product Detail Page\r\n * @param {jQuery} $productContainer - DOM container for a given product\r\n * @param {Object} msgs - object containing resource messages\r\n */\r\nfunction processSwatchValues(attr, $productContainer, msgs) {\r\n    attr.values.forEach(function (attrValue) {\r\n        var $attrValue = $productContainer.find('[data-attr=\"' + attr.id + '\"] [data-attr-value=\"' +\r\n            attrValue.value + '\"]');\r\n        var $swatchButton = $attrValue.parent();\r\n\r\n        if (attrValue.selected) {\r\n            $attrValue.addClass('selected');\r\n            $attrValue.siblings('.selected-assistive-text').text(msgs.assistiveSelectedText);\r\n        } else {\r\n            $attrValue.removeClass('selected');\r\n            $attrValue.siblings('.selected-assistive-text').empty();\r\n        }\r\n\r\n        if (attrValue.url) {\r\n            $swatchButton.attr('data-url', attrValue.url);\r\n        } else {\r\n            $swatchButton.removeAttr('data-url');\r\n        }\r\n\r\n        // Disable if not selectable\r\n        $attrValue.removeClass('selectable unselectable');\r\n\r\n        $attrValue.addClass(attrValue.selectable ? 'selectable' : 'unselectable');\r\n    });\r\n}\r\n\r\n/**\r\n * Process attribute values associated with an attribute that does not have image swatches\r\n *\r\n * @param {Object} attr - Attribute\r\n * @param {string} attr.id - Attribute ID\r\n * @param {Object[]} attr.values - Array of attribute value objects\r\n * @param {string} attr.values.value - Attribute coded value\r\n * @param {string} attr.values.url - URL to de/select an attribute value of the product\r\n * @param {boolean} attr.values.isSelectable - Flag as to whether an attribute value can be\r\n *     selected.  If there is no variant that corresponds to a specific combination of attribute\r\n *     values, an attribute may be disabled in the Product Detail Page\r\n * @param {jQuery} $productContainer - DOM container for a given product\r\n */\r\nfunction processNonSwatchValues(attr, $productContainer) {\r\n    var $attr = '[data-attr=\"' + attr.id + '\"]';\r\n    var $defaultOption = $productContainer.find($attr + ' .select-' + attr.id + ' option:first');\r\n    $defaultOption.attr('value', attr.resetUrl);\r\n\r\n    attr.values.forEach(function (attrValue) {\r\n        var $attrValue = $productContainer\r\n            .find($attr + ' [data-attr-value=\"' + attrValue.value + '\"]');\r\n        $attrValue.attr('value', attrValue.url)\r\n            .removeAttr('disabled');\r\n\r\n        if (!attrValue.selectable) {\r\n            $attrValue.attr('disabled', true);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Routes the handling of attribute processing depending on whether the attribute has image\r\n *     swatches or not\r\n *\r\n * @param {Object} attrs - Attribute\r\n * @param {string} attr.id - Attribute ID\r\n * @param {jQuery} $productContainer - DOM element for a given product\r\n * @param {Object} msgs - object containing resource messages\r\n */\r\nfunction updateAttrs(attrs, $productContainer, msgs) {\r\n    // Currently, the only attribute type that has image swatches is Color.\r\n    var attrsWithSwatches = ['color'];\r\n\r\n    attrs.forEach(function (attr) {\r\n        if (attrsWithSwatches.indexOf(attr.id) > -1) {\r\n            processSwatchValues(attr, $productContainer, msgs);\r\n        } else {\r\n            processNonSwatchValues(attr, $productContainer);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the availability status in the Product Detail Page\r\n *\r\n * @param {Object} response - Ajax response object after an\r\n *                            attribute value has been [de]selected\r\n * @param {jQuery} $productContainer - DOM element for a given product\r\n */\r\nfunction updateAvailability(response, $productContainer) {\r\n    var availabilityValue = '';\r\n    var availabilityMessages = response.product.availability.messages;\r\n    if (!response.product.readyToOrder) {\r\n        availabilityValue = '<li><div>' + response.resources.info_selectforstock + '</div></li>';\r\n    } else {\r\n        availabilityMessages.forEach(function (message) {\r\n            availabilityValue += '<li><div>' + message + '</div></li>';\r\n        });\r\n    }\r\n\r\n    $($productContainer).trigger('product:updateAvailability', {\r\n        product: response.product,\r\n        $productContainer: $productContainer,\r\n        message: availabilityValue,\r\n        resources: response.resources\r\n    });\r\n}\r\n\r\n/**\r\n * Generates html for product attributes section\r\n *\r\n * @param {array} attributes - list of attributes\r\n * @return {string} - Compiled HTML\r\n */\r\nfunction getAttributesHtml(attributes) {\r\n    if (!attributes) {\r\n        return '';\r\n    }\r\n\r\n    var html = '';\r\n\r\n    attributes.forEach(function (attributeGroup) {\r\n        if (attributeGroup.ID === 'mainAttributes') {\r\n            attributeGroup.attributes.forEach(function (attribute) {\r\n                html += '<div class=\"attribute-values\">' + attribute.label + ': '\r\n                    + attribute.value + '</div>';\r\n            });\r\n        }\r\n    });\r\n\r\n    return html;\r\n}\r\n\r\n/**\r\n * @typedef UpdatedOptionValue\r\n * @type Object\r\n * @property {string} id - Option value ID for look up\r\n * @property {string} url - Updated option value selection URL\r\n */\r\n\r\n/**\r\n * @typedef OptionSelectionResponse\r\n * @type Object\r\n * @property {string} priceHtml - Updated price HTML code\r\n * @property {Object} options - Updated Options\r\n * @property {string} options.id - Option ID\r\n * @property {UpdatedOptionValue[]} options.values - Option values\r\n */\r\n\r\n/**\r\n * Updates DOM using post-option selection Ajax response\r\n *\r\n * @param {OptionSelectionResponse} optionsHtml - Ajax response optionsHtml from selecting a product option\r\n * @param {jQuery} $productContainer - DOM element for current product\r\n */\r\nfunction updateOptions(optionsHtml, $productContainer) {\r\n\t// Update options\r\n    $productContainer.find('.product-options').empty().html(optionsHtml);\r\n}\r\n\r\n/**\r\n * Dynamically creates Bootstrap carousel from response containing images\r\n * @param {Object[]} imgs - Array of large product images,along with related information\r\n * @param {jQuery} $productContainer - DOM element for a given product\r\n */\r\nfunction createCarousel(imgs, $productContainer) {\r\n    var carousel = $productContainer.find('.carousel');\r\n    $(carousel).carousel('dispose');\r\n    var carouselId = $(carousel).attr('id');\r\n    $(carousel).empty().append('<ol class=\"carousel-indicators\"></ol><div class=\"carousel-inner\" role=\"listbox\"></div><a class=\"carousel-control-prev\" href=\"#' + carouselId + '\" role=\"button\" data-slide=\"prev\"><span class=\"fa icon-prev\" aria-hidden=\"true\"></span><span class=\"sr-only\">' + $(carousel).data('prev') + '</span></a><a class=\"carousel-control-next\" href=\"#' + carouselId + '\" role=\"button\" data-slide=\"next\"><span class=\"fa icon-next\" aria-hidden=\"true\"></span><span class=\"sr-only\">' + $(carousel).data('next') + '</span></a>');\r\n    for (var i = 0; i < imgs.length; i++) {\r\n        $('<div class=\"carousel-item\"><img src=\"' + imgs[i].url + '\" class=\"d-block img-fluid\" alt=\"' + imgs[i].alt + ' image number ' + parseInt(imgs[i].index, 10) + '\" title=\"' + imgs[i].title + '\" itemprop=\"image\" /></div>').appendTo($(carousel).find('.carousel-inner'));\r\n        $('<li data-target=\"#' + carouselId + '\" data-slide-to=\"' + i + '\" class=\"\"></li>').appendTo($(carousel).find('.carousel-indicators'));\r\n    }\r\n    $($(carousel).find('.carousel-item')).first().addClass('active');\r\n    $($(carousel).find('.carousel-indicators > li')).first().addClass('active');\r\n    if (imgs.length === 1) {\r\n        $($(carousel).find('.carousel-indicators, a[class^=\"carousel-control-\"]')).detach();\r\n    }\r\n    $(carousel).carousel();\r\n    $($(carousel).find('.carousel-indicators')).attr('aria-hidden', true);\r\n}\r\n\r\n/**\r\n * Parses JSON from Ajax call made whenever an attribute value is [de]selected\r\n * @param {Object} response - response from Ajax call\r\n * @param {Object} response.product - Product object\r\n * @param {string} response.product.id - Product ID\r\n * @param {Object[]} response.product.variationAttributes - Product attributes\r\n * @param {Object[]} response.product.images - Product images\r\n * @param {boolean} response.product.hasRequiredAttrsSelected - Flag as to whether all required\r\n *     attributes have been selected.  Used partially to\r\n *     determine whether the Add to Cart button can be enabled\r\n * @param {jQuery} $productContainer - DOM element for a given product.\r\n */\r\nfunction handleVariantResponse(response, $productContainer) {\r\n    var isChoiceOfBonusProducts =\r\n        $productContainer.parents('.choose-bonus-product-dialog').length > 0;\r\n    var isVaraint;\r\n    if (response.product.variationAttributes) {\r\n        updateAttrs(response.product.variationAttributes, $productContainer, response.resources);\r\n        isVaraint = response.product.productType === 'variant';\r\n        if (isChoiceOfBonusProducts && isVaraint) {\r\n            $productContainer.parent('.bonus-product-item')\r\n                .data('pid', response.product.id);\r\n\r\n            $productContainer.parent('.bonus-product-item')\r\n                .data('ready-to-order', response.product.readyToOrder);\r\n        }\r\n    }\r\n\r\n    // Update primary images\r\n    var primaryImageUrls = response.product.images.large;\r\n    createCarousel(primaryImageUrls, $productContainer);\r\n\r\n    // Update pricing\r\n    if (!isChoiceOfBonusProducts) {\r\n        var $priceSelector = $('.prices .price', $productContainer).length\r\n            ? $('.prices .price', $productContainer)\r\n            : $('.prices .price');\r\n        $priceSelector.replaceWith(response.product.price.html);\r\n    }\r\n\r\n    // Update promotions\r\n    $productContainer.find('.promotions').empty().html(response.product.promotionsHtml);\r\n\r\n    updateAvailability(response, $productContainer);\r\n\r\n    if (isChoiceOfBonusProducts) {\r\n        var $selectButton = $productContainer.find('.select-bonus-product');\r\n        $selectButton.trigger('bonusproduct:updateSelectButton', {\r\n            product: response.product, $productContainer: $productContainer\r\n        });\r\n    } else {\r\n        // Enable \"Add to Cart\" button if all required attributes have been selected\r\n        $('button.add-to-cart, button.add-to-cart-global, button.update-cart-product-global').trigger('product:updateAddToCart', {\r\n            product: response.product, $productContainer: $productContainer\r\n        }).trigger('product:statusUpdate', response.product);\r\n    }\r\n\r\n    // Update attributes\r\n    $productContainer.find('.main-attributes').empty()\r\n        .html(getAttributesHtml(response.product.attributes));\r\n}\r\n\r\n/**\r\n * @typespec UpdatedQuantity\r\n * @type Object\r\n * @property {boolean} selected - Whether the quantity has been selected\r\n * @property {string} value - The number of products to purchase\r\n * @property {string} url - Compiled URL that specifies variation attributes, product ID, options,\r\n *     etc.\r\n */\r\n\r\n/**\r\n * Updates the quantity DOM elements post Ajax call\r\n * @param {UpdatedQuantity[]} quantities -\r\n * @param {jQuery} $productContainer - DOM container for a given product\r\n */\r\nfunction updateQuantities(quantities, $productContainer) {\r\n    if ($productContainer.parent('.bonus-product-item').length <= 0) {\r\n        var optionsHtml = quantities.map(function (quantity) {\r\n            var selected = quantity.selected ? ' selected ' : '';\r\n            return '<option value=\"' + quantity.value + '\"  data-url=\"' + quantity.url + '\"' +\r\n                selected + '>' + quantity.value + '</option>';\r\n        }).join('');\r\n        getQuantitySelector($productContainer).empty().html(optionsHtml);\r\n    }\r\n}\r\n\r\n/**\r\n * updates the product view when a product attribute is selected or deselected or when\r\n *         changing quantity\r\n * @param {string} selectedValueUrl - the Url for the selected variation value\r\n * @param {jQuery} $productContainer - DOM element for current product\r\n */\r\nfunction attributeSelect(selectedValueUrl, $productContainer) {\r\n    if (selectedValueUrl) {\r\n        $('body').trigger('product:beforeAttributeSelect',\r\n            { url: selectedValueUrl, container: $productContainer });\r\n\r\n        $.ajax({\r\n            url: selectedValueUrl,\r\n            method: 'GET',\r\n            success: function (data) {\r\n                handleVariantResponse(data, $productContainer);\r\n                updateOptions(data.product.optionsHtml, $productContainer);\r\n                updateQuantities(data.product.quantities, $productContainer);\r\n                $('body').trigger('product:afterAttributeSelect',\r\n                    { data: data, container: $productContainer });\r\n                $.spinner().stop();\r\n            },\r\n            error: function () {\r\n                $.spinner().stop();\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Retrieves url to use when adding a product to the cart\r\n *\r\n * @return {string} - The provided URL to use when adding a product to the cart\r\n */\r\nfunction getAddToCartUrl() {\r\n    return $('.add-to-cart-url').val();\r\n}\r\n\r\n/**\r\n * Parses the html for a modal window\r\n * @param {string} html - representing the body and footer of the modal window\r\n *\r\n * @return {Object} - Object with properties body and footer.\r\n */\r\nfunction parseHtml(html) {\r\n    var $html = $('<div>').append($.parseHTML(html));\r\n\r\n    var body = $html.find('.choice-of-bonus-product');\r\n    var footer = $html.find('.modal-footer').children();\r\n\r\n    return { body: body, footer: footer };\r\n}\r\n\r\n/**\r\n * Retrieves url to use when adding a product to the cart\r\n *\r\n * @param {Object} data - data object used to fill in dynamic portions of the html\r\n */\r\nfunction chooseBonusProducts(data) {\r\n    $('.modal-body').spinner().start();\r\n\r\n    if ($('#chooseBonusProductModal').length !== 0) {\r\n        $('#chooseBonusProductModal').remove();\r\n    }\r\n    var bonusUrl;\r\n    if (data.bonusChoiceRuleBased) {\r\n        bonusUrl = data.showProductsUrlRuleBased;\r\n    } else {\r\n        bonusUrl = data.showProductsUrlListBased;\r\n    }\r\n\r\n    var htmlString = '<!-- Modal -->'\r\n        + '<div class=\"modal fade\" id=\"chooseBonusProductModal\" tabindex=\"-1\" role=\"dialog\">'\r\n        + '<span class=\"enter-message sr-only\" ></span>'\r\n        + '<div class=\"modal-dialog choose-bonus-product-dialog\" '\r\n        + 'data-total-qty=\"' + data.maxBonusItems + '\"'\r\n        + 'data-UUID=\"' + data.uuid + '\"'\r\n        + 'data-pliUUID=\"' + data.pliUUID + '\"'\r\n        + 'data-addToCartUrl=\"' + data.addToCartUrl + '\"'\r\n        + 'data-pageStart=\"0\"'\r\n        + 'data-pageSize=\"' + data.pageSize + '\"'\r\n        + 'data-moreURL=\"' + data.showProductsUrlRuleBased + '\"'\r\n        + 'data-bonusChoiceRuleBased=\"' + data.bonusChoiceRuleBased + '\">'\r\n        + '<!-- Modal content-->'\r\n        + '<div class=\"modal-content\">'\r\n        + '<div class=\"modal-header\">'\r\n        + '    <span class=\"\">' + data.labels.selectprods + '</span>'\r\n        + '    <button type=\"button\" class=\"close pull-right\" data-dismiss=\"modal\">'\r\n        + '        <span aria-hidden=\"true\">&times;</span>'\r\n        + '        <span class=\"sr-only\"> </span>'\r\n        + '    </button>'\r\n        + '</div>'\r\n        + '<div class=\"modal-body\"></div>'\r\n        + '<div class=\"modal-footer\"></div>'\r\n        + '</div>'\r\n        + '</div>'\r\n        + '</div>';\r\n    $('body').append(htmlString);\r\n    $('.modal-body').spinner().start();\r\n\r\n    $.ajax({\r\n        url: bonusUrl,\r\n        method: 'GET',\r\n        dataType: 'json',\r\n        success: function (response) {\r\n            var parsedHtml = parseHtml(response.renderedTemplate);\r\n            $('#chooseBonusProductModal .modal-body').empty();\r\n            $('#chooseBonusProductModal .enter-message').text(response.enterDialogMessage);\r\n            $('#chooseBonusProductModal .modal-header .close .sr-only').text(response.closeButtonText);\r\n            $('#chooseBonusProductModal .modal-body').html(parsedHtml.body);\r\n            $('#chooseBonusProductModal .modal-footer').html(parsedHtml.footer);\r\n            $('#chooseBonusProductModal').modal('show');\r\n            $.spinner().stop();\r\n        },\r\n        error: function () {\r\n            $.spinner().stop();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Updates the Mini-Cart quantity value after the customer has pressed the \"Add to Cart\" button\r\n * @param {string} response - ajax response from clicking the add to cart button\r\n */\r\nfunction handlePostCartAdd(response) {\r\n    $('.minicart').trigger('count:update', response);\r\n    var messageType = response.error ? 'alert-danger' : 'alert-success';\r\n    // show add to cart toast\r\n    if (response.newBonusDiscountLineItem\r\n        && Object.keys(response.newBonusDiscountLineItem).length !== 0) {\r\n        chooseBonusProducts(response.newBonusDiscountLineItem);\r\n    } else {\r\n        if ($('.add-to-cart-messages').length === 0) {\r\n            $('body').append(\r\n                '<div class=\"add-to-cart-messages\"></div>'\r\n            );\r\n        }\r\n\r\n        $('.add-to-cart-messages').append(\r\n            '<div class=\"alert ' + messageType + ' add-to-basket-alert text-center\" role=\"alert\">'\r\n            + response.message\r\n            + '</div>'\r\n        );\r\n\r\n        setTimeout(function () {\r\n            $('.add-to-basket-alert').remove();\r\n        }, 5000);\r\n    }\r\n}\r\n\r\n/**\r\n * Retrieves the bundle product item ID's for the Controller to replace bundle master product\r\n * items with their selected variants\r\n *\r\n * @return {string[]} - List of selected bundle product item ID's\r\n */\r\nfunction getChildProducts() {\r\n    var childProducts = [];\r\n    $('.bundle-item').each(function () {\r\n        childProducts.push({\r\n            pid: $(this).find('.product-id').text(),\r\n            quantity: parseInt($(this).find('label.quantity').data('quantity'), 10)\r\n        });\r\n    });\r\n\r\n    return childProducts.length ? JSON.stringify(childProducts) : [];\r\n}\r\n\r\n/**\r\n * Retrieve product options\r\n *\r\n * @param {jQuery} $productContainer - DOM element for current product\r\n * @return {string} - Product options and their selected values\r\n */\r\nfunction getOptions($productContainer) {\r\n    var options = $productContainer\r\n        .find('.product-option')\r\n        .map(function () {\r\n            var $elOption = $(this).find('.options-select');\r\n            var urlValue = $elOption.val();\r\n            var selectedValueId = $elOption.find('option[value=\"' + urlValue + '\"]')\r\n                .data('value-id');\r\n            return {\r\n                optionId: $(this).data('option-id'),\r\n                selectedValueId: selectedValueId\r\n            };\r\n        }).toArray();\r\n\r\n    return JSON.stringify(options);\r\n}\r\n\r\n/**\r\n * Makes a call to the server to report the event of adding an item to the cart\r\n *\r\n * @param {string | boolean} url - a string representing the end point to hit so that the event can be recorded, or false\r\n */\r\nfunction miniCartReportingUrl(url) {\r\n    if (url) {\r\n        $.ajax({\r\n            url: url,\r\n            method: 'GET',\r\n            success: function () {\r\n                // reporting urls hit on the server\r\n            },\r\n            error: function () {\r\n                // no reporting urls hit on the server\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    attributeSelect: attributeSelect,\r\n    methods: {\r\n        editBonusProducts: function (data) {\r\n            chooseBonusProducts(data);\r\n        }\r\n    },\r\n\r\n    focusChooseBonusProductModal: function () {\r\n        $('body').on('shown.bs.modal', '#chooseBonusProductModal', function () {\r\n            $('#chooseBonusProductModal').siblings().attr('aria-hidden', 'true');\r\n            $('#chooseBonusProductModal .close').focus();\r\n        });\r\n    },\r\n\r\n    onClosingChooseBonusProductModal: function () {\r\n        $('body').on('hidden.bs.modal', '#chooseBonusProductModal', function () {\r\n            $('#chooseBonusProductModal').siblings().attr('aria-hidden', 'false');\r\n        });\r\n    },\r\n\r\n    trapChooseBonusProductModalFocus: function () {\r\n        $('body').on('keydown', '#chooseBonusProductModal', function (e) {\r\n            var focusParams = {\r\n                event: e,\r\n                containerSelector: '#chooseBonusProductModal',\r\n                firstElementSelector: '.close',\r\n                lastElementSelector: '.add-bonus-products'\r\n            };\r\n            focusHelper.setTabNextFocus(focusParams);\r\n        });\r\n    },\r\n\r\n    colorAttribute: function () {\r\n        $(document).on('click', '[data-attr=\"color\"] button', function (e) {\r\n            e.preventDefault();\r\n\r\n            if ($(this).attr('disabled')) {\r\n                return;\r\n            }\r\n            var $productContainer = $(this).closest('.set-item');\r\n            if (!$productContainer.length) {\r\n                $productContainer = $(this).closest('.product-detail');\r\n            }\r\n\r\n            attributeSelect($(this).attr('data-url'), $productContainer);\r\n        });\r\n    },\r\n\r\n    selectAttribute: function () {\r\n        $(document).on('change', 'select[class*=\"select-\"], .options-select', function (e) {\r\n            e.preventDefault();\r\n\r\n            var $productContainer = $(this).closest('.set-item');\r\n            if (!$productContainer.length) {\r\n                $productContainer = $(this).closest('.product-detail');\r\n            }\r\n            attributeSelect(e.currentTarget.value, $productContainer);\r\n        });\r\n    },\r\n\r\n    availability: function () {\r\n        $(document).on('change', '.quantity-select', function (e) {\r\n            e.preventDefault();\r\n\r\n            var $productContainer = $(this).closest('.product-detail');\r\n            if (!$productContainer.length) {\r\n                $productContainer = $(this).closest('.modal-content').find('.product-quickview');\r\n            }\r\n\r\n            if ($('.bundle-items', $productContainer).length === 0) {\r\n                attributeSelect($(e.currentTarget).find('option:selected').data('url'),\r\n                    $productContainer);\r\n            }\r\n        });\r\n    },\r\n\r\n    addToCart: function () {\r\n        $(document).on('click', 'button.add-to-cart, button.add-to-cart-global', function () {\r\n            var addToCartUrl;\r\n            var pid;\r\n            var pidsObj;\r\n            var setPids;\r\n\r\n            $('body').trigger('product:beforeAddToCart', this);\r\n\r\n            if ($('.set-items').length && $(this).hasClass('add-to-cart-global')) {\r\n                setPids = [];\r\n\r\n                $('.product-detail').each(function () {\r\n                    if (!$(this).hasClass('product-set-detail')) {\r\n                        setPids.push({\r\n                            pid: $(this).find('.product-id').text(),\r\n                            qty: $(this).find('.quantity-select').val(),\r\n                            options: getOptions($(this))\r\n                        });\r\n                    }\r\n                });\r\n                pidsObj = JSON.stringify(setPids);\r\n            }\r\n\r\n            pid = getPidValue($(this));\r\n\r\n            var $productContainer = $(this).closest('.product-detail');\r\n            if (!$productContainer.length) {\r\n                $productContainer = $(this).closest('.quick-view-dialog').find('.product-detail');\r\n            }\r\n\r\n            addToCartUrl = getAddToCartUrl();\r\n\r\n            var form = {\r\n                pid: pid,\r\n                pidsObj: pidsObj,\r\n                childProducts: getChildProducts(),\r\n                quantity: getQuantitySelected($(this))\r\n            };\r\n\r\n            if (!$('.bundle-item').length) {\r\n                form.options = getOptions($productContainer);\r\n            }\r\n\r\n            $(this).trigger('updateAddToCartFormData', form);\r\n            if (addToCartUrl) {\r\n                $.ajax({\r\n                    url: addToCartUrl,\r\n                    method: 'POST',\r\n                    data: form,\r\n                    success: function (data) {\r\n                        handlePostCartAdd(data);\r\n                        $('body').trigger('product:afterAddToCart', data);\r\n                        $.spinner().stop();\r\n                        miniCartReportingUrl(data.reportingURL);\r\n                    },\r\n                    error: function () {\r\n                        $.spinner().stop();\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    },\r\n    selectBonusProduct: function () {\r\n        $(document).on('click', '.select-bonus-product', function () {\r\n            var $choiceOfBonusProduct = $(this).parents('.choice-of-bonus-product');\r\n            var pid = $(this).data('pid');\r\n            var maxPids = $('.choose-bonus-product-dialog').data('total-qty');\r\n            var submittedQty = parseInt($choiceOfBonusProduct.find('.bonus-quantity-select').val(), 10);\r\n            var totalQty = 0;\r\n            $.each($('#chooseBonusProductModal .selected-bonus-products .selected-pid'), function () {\r\n                totalQty += $(this).data('qty');\r\n            });\r\n            totalQty += submittedQty;\r\n            var optionID = $choiceOfBonusProduct.find('.product-option').data('option-id');\r\n            var valueId = $choiceOfBonusProduct.find('.options-select option:selected').data('valueId');\r\n            if (totalQty <= maxPids) {\r\n                var selectedBonusProductHtml = ''\r\n                + '<div class=\"selected-pid row\" '\r\n                + 'data-pid=\"' + pid + '\"'\r\n                + 'data-qty=\"' + submittedQty + '\"'\r\n                + 'data-optionID=\"' + (optionID || '') + '\"'\r\n                + 'data-option-selected-value=\"' + (valueId || '') + '\"'\r\n                + '>'\r\n                + '<div class=\"col-sm-11 col-9 bonus-product-name\" >'\r\n                + $choiceOfBonusProduct.find('.product-name').html()\r\n                + '</div>'\r\n                + '<div class=\"col-1\"><i class=\"fa fa-times\" aria-hidden=\"true\"></i></div>'\r\n                + '</div>'\r\n                ;\r\n                $('#chooseBonusProductModal .selected-bonus-products').append(selectedBonusProductHtml);\r\n                $('.pre-cart-products').html(totalQty);\r\n                $('.selected-bonus-products .bonus-summary').removeClass('alert-danger');\r\n            } else {\r\n                $('.selected-bonus-products .bonus-summary').addClass('alert-danger');\r\n            }\r\n        });\r\n    },\r\n    removeBonusProduct: function () {\r\n        $(document).on('click', '.selected-pid', function () {\r\n            $(this).remove();\r\n            var $selected = $('#chooseBonusProductModal .selected-bonus-products .selected-pid');\r\n            var count = 0;\r\n            if ($selected.length) {\r\n                $selected.each(function () {\r\n                    count += parseInt($(this).data('qty'), 10);\r\n                });\r\n            }\r\n\r\n            $('.pre-cart-products').html(count);\r\n            $('.selected-bonus-products .bonus-summary').removeClass('alert-danger');\r\n        });\r\n    },\r\n    enableBonusProductSelection: function () {\r\n        $('body').on('bonusproduct:updateSelectButton', function (e, response) {\r\n            $('button.select-bonus-product', response.$productContainer).attr('disabled',\r\n                (!response.product.readyToOrder || !response.product.available));\r\n            var pid = response.product.id;\r\n            $('button.select-bonus-product', response.$productContainer).data('pid', pid);\r\n        });\r\n    },\r\n    showMoreBonusProducts: function () {\r\n        $(document).on('click', '.show-more-bonus-products', function () {\r\n            var url = $(this).data('url');\r\n            $('.modal-content').spinner().start();\r\n            $.ajax({\r\n                url: url,\r\n                method: 'GET',\r\n                success: function (html) {\r\n                    var parsedHtml = parseHtml(html);\r\n                    $('.modal-body').append(parsedHtml.body);\r\n                    $('.show-more-bonus-products:first').remove();\r\n                    $('.modal-content').spinner().stop();\r\n                },\r\n                error: function () {\r\n                    $('.modal-content').spinner().stop();\r\n                }\r\n            });\r\n        });\r\n    },\r\n    addBonusProductsToCart: function () {\r\n        $(document).on('click', '.add-bonus-products', function () {\r\n            var $readyToOrderBonusProducts = $('.choose-bonus-product-dialog .selected-pid');\r\n            var queryString = '?pids=';\r\n            var url = $('.choose-bonus-product-dialog').data('addtocarturl');\r\n            var pidsObject = {\r\n                bonusProducts: []\r\n            };\r\n\r\n            $.each($readyToOrderBonusProducts, function () {\r\n                var qtyOption =\r\n                    parseInt($(this)\r\n                        .data('qty'), 10);\r\n\r\n                var option = null;\r\n                if (qtyOption > 0) {\r\n                    if ($(this).data('optionid') && $(this).data('option-selected-value')) {\r\n                        option = {};\r\n                        option.optionId = $(this).data('optionid');\r\n                        option.productId = $(this).data('pid');\r\n                        option.selectedValueId = $(this).data('option-selected-value');\r\n                    }\r\n                    pidsObject.bonusProducts.push({\r\n                        pid: $(this).data('pid'),\r\n                        qty: qtyOption,\r\n                        options: [option]\r\n                    });\r\n                    pidsObject.totalQty = parseInt($('.pre-cart-products').html(), 10);\r\n                }\r\n            });\r\n            queryString += JSON.stringify(pidsObject);\r\n            queryString = queryString + '&uuid=' + $('.choose-bonus-product-dialog').data('uuid');\r\n            queryString = queryString + '&pliuuid=' + $('.choose-bonus-product-dialog').data('pliuuid');\r\n            $.spinner().start();\r\n            $.ajax({\r\n                url: url + queryString,\r\n                method: 'POST',\r\n                success: function (data) {\r\n                    $.spinner().stop();\r\n                    if (data.error) {\r\n                        $('#chooseBonusProductModal').modal('hide');\r\n                        if ($('.add-to-cart-messages').length === 0) {\r\n                            $('body').append('<div class=\"add-to-cart-messages\"></div>');\r\n                        }\r\n                        $('.add-to-cart-messages').append(\r\n                            '<div class=\"alert alert-danger add-to-basket-alert text-center\"'\r\n                            + ' role=\"alert\">'\r\n                            + data.errorMessage + '</div>'\r\n                        );\r\n                        setTimeout(function () {\r\n                            $('.add-to-basket-alert').remove();\r\n                        }, 3000);\r\n                    } else {\r\n                        $('.configure-bonus-product-attributes').html(data);\r\n                        $('.bonus-products-step2').removeClass('hidden-xl-down');\r\n                        $('#chooseBonusProductModal').modal('hide');\r\n\r\n                        if ($('.add-to-cart-messages').length === 0) {\r\n                            $('body').append('<div class=\"add-to-cart-messages\"></div>');\r\n                        }\r\n                        $('.minicart-quantity').html(data.totalQty);\r\n                        $('.add-to-cart-messages').append(\r\n                            '<div class=\"alert alert-success add-to-basket-alert text-center\"'\r\n                            + ' role=\"alert\">'\r\n                            + data.msgSuccess + '</div>'\r\n                        );\r\n                        setTimeout(function () {\r\n                            $('.add-to-basket-alert').remove();\r\n                            if ($('.cart-page').length) {\r\n                                location.reload();\r\n                            }\r\n                        }, 1500);\r\n                    }\r\n                },\r\n                error: function () {\r\n                    $.spinner().stop();\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    getPidValue: getPidValue,\r\n    getQuantitySelected: getQuantitySelected,\r\n    miniCartReportingUrl: miniCartReportingUrl\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/product/detail.js":
/*!**************************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/product/detail.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\nvar base = __webpack_require__(/*! ./base */ \"./cartridges/app_storefront_base/cartridge/client/default/js/product/base.js\");\r\n\r\n/**\r\n * Enable/disable UI elements\r\n * @param {boolean} enableOrDisable - true or false\r\n */\r\nfunction updateAddToCartEnableDisableOtherElements(enableOrDisable) {\r\n    $('button.add-to-cart-global').attr('disabled', enableOrDisable);\r\n}\r\n\r\nmodule.exports = {\r\n    methods: {\r\n        updateAddToCartEnableDisableOtherElements: updateAddToCartEnableDisableOtherElements\r\n    },\r\n\r\n    availability: base.availability,\r\n\r\n    addToCart: base.addToCart,\r\n\r\n    updateAttributesAndDetails: function () {\r\n        $('body').on('product:statusUpdate', function (e, data) {\r\n            var $productContainer = $('.product-detail[data-pid=\"' + data.id + '\"]');\r\n\r\n            $productContainer.find('.description-and-detail .product-attributes')\r\n                .empty()\r\n                .html(data.attributesHtml);\r\n\r\n            if (data.shortDescription) {\r\n                $productContainer.find('.description-and-detail .description')\r\n                    .removeClass('hidden-xl-down');\r\n                $productContainer.find('.description-and-detail .description .content')\r\n                    .empty()\r\n                    .html(data.shortDescription);\r\n            } else {\r\n                $productContainer.find('.description-and-detail .description')\r\n                    .addClass('hidden-xl-down');\r\n            }\r\n\r\n            if (data.longDescription) {\r\n                $productContainer.find('.description-and-detail .details')\r\n                    .removeClass('hidden-xl-down');\r\n                $productContainer.find('.description-and-detail .details .content')\r\n                    .empty()\r\n                    .html(data.longDescription);\r\n            } else {\r\n                $productContainer.find('.description-and-detail .details')\r\n                    .addClass('hidden-xl-down');\r\n            }\r\n        });\r\n    },\r\n\r\n    showSpinner: function () {\r\n        $('body').on('product:beforeAddToCart product:beforeAttributeSelect', function () {\r\n            $.spinner().start();\r\n        });\r\n    },\r\n    updateAttribute: function () {\r\n        $('body').on('product:afterAttributeSelect', function (e, response) {\r\n            if ($('.product-detail>.bundle-items').length) {\r\n                response.container.data('pid', response.data.product.id);\r\n                response.container.find('.product-id').text(response.data.product.id);\r\n            } else if ($('.product-set-detail').eq(0)) {\r\n                response.container.data('pid', response.data.product.id);\r\n                response.container.find('.product-id').text(response.data.product.id);\r\n            } else {\r\n                $('.product-id').text(response.data.product.id);\r\n                $('.product-detail:not(\".bundle-item\")').data('pid', response.data.product.id);\r\n            }\r\n        });\r\n    },\r\n    updateAddToCart: function () {\r\n        $('body').on('product:updateAddToCart', function (e, response) {\r\n            // update local add to cart (for sets)\r\n            $('button.add-to-cart', response.$productContainer).attr('disabled',\r\n                (!response.product.readyToOrder || !response.product.available));\r\n\r\n            var enable = $('.product-availability').toArray().every(function (item) {\r\n                return $(item).data('available') && $(item).data('ready-to-order');\r\n            });\r\n            module.exports.methods.updateAddToCartEnableDisableOtherElements(!enable);\r\n        });\r\n    },\r\n    updateAvailability: function () {\r\n        $('body').on('product:updateAvailability', function (e, response) {\r\n            $('div.availability', response.$productContainer)\r\n                .data('ready-to-order', response.product.readyToOrder)\r\n                .data('available', response.product.available);\r\n\r\n            $('.availability-msg', response.$productContainer)\r\n                .empty().html(response.message);\r\n\r\n            if ($('.global-availability').length) {\r\n                var allAvailable = $('.product-availability').toArray()\r\n                    .every(function (item) { return $(item).data('available'); });\r\n\r\n                var allReady = $('.product-availability').toArray()\r\n                    .every(function (item) { return $(item).data('ready-to-order'); });\r\n\r\n                $('.global-availability')\r\n                    .data('ready-to-order', allReady)\r\n                    .data('available', allAvailable);\r\n\r\n                $('.global-availability .availability-msg').empty()\r\n                    .html(allReady ? response.message : response.resources.info_selectforstock);\r\n            }\r\n        });\r\n    },\r\n    sizeChart: function () {\r\n        $('.size-chart a').on('click', function (e) {\r\n            e.preventDefault();\r\n            var url = $(this).attr('href');\r\n            var $prodSizeChart = $(this).closest('.size-chart').find('.size-chart-collapsible');\r\n            if ($prodSizeChart.is(':empty')) {\r\n                $.ajax({\r\n                    url: url,\r\n                    type: 'get',\r\n                    dataType: 'json',\r\n                    success: function (data) {\r\n                        $prodSizeChart.append(data.content);\r\n                    }\r\n                });\r\n            }\r\n            $prodSizeChart.toggleClass('active');\r\n        });\r\n\r\n        var $sizeChart = $('.size-chart-collapsible');\r\n        $('body').on('click touchstart', function (e) {\r\n            if ($('.size-chart').has(e.target).length <= 0) {\r\n                $sizeChart.removeClass('active');\r\n            }\r\n        });\r\n    },\r\n    copyProductLink: function () {\r\n        $('body').on('click', '#fa-link', function () {\r\n            event.preventDefault();\r\n            var $temp = $('<input>');\r\n            $('body').append($temp);\r\n            $temp.val($('#shareUrl').val()).select();\r\n            document.execCommand('copy');\r\n            $temp.remove();\r\n            $('.copy-link-message').attr('role', 'alert');\r\n            $('.copy-link-message').removeClass('d-none');\r\n            setTimeout(function () {\r\n                $('.copy-link-message').addClass('d-none');\r\n            }, 3000);\r\n        });\r\n    },\r\n\r\n    focusChooseBonusProductModal: base.focusChooseBonusProductModal()\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/product/detail.js?");

/***/ }),

/***/ "./cartridges/app_storefront_base/cartridge/client/default/js/util.js":
/*!****************************************************************************!*\
  !*** ./cartridges/app_storefront_base/cartridge/client/default/js/util.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\r\n\r\nmodule.exports = function (include) {\r\n    if (typeof include === 'function') {\r\n        include();\r\n    } else if (typeof include === 'object') {\r\n        Object.keys(include).forEach(function (key) {\r\n            if (typeof include[key] === 'function') {\r\n                include[key]();\r\n            }\r\n        });\r\n    }\r\n};\r\n\n\n//# sourceURL=webpack:///./cartridges/app_storefront_base/cartridge/client/default/js/util.js?");

/***/ })

/******/ });